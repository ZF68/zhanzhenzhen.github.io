fus 2.3.0
import "babel-polyfill"
import "./shared.manifest" all

# Modify these 2 variables to match yours.
username: "zhanzhenzhen"
repo: "zhanzhenzhen.github.io"

shared: import "site/shared"
#import "./shared.main"
client: import "site/client"

markdownIt: import "markdown-it"
emoji: import "markdown-it-emoji"
twemoji: import "twemoji"
hljs: import "highlight.js"
#manuals: require("./client.manuals.coffee")
ui: client.ui

$toc: import "./client.toc" all
$button: import "./client.button" all

apiBase: "https://api.github.com"

docsObj: {}
originalTitle: document.title

md: markdownIt{
    html: true
    xhtmlOut: true
    highlight: (str, lang) ->
        if hljs.getLanguage(lang)'ok
            try
                hljs.highlight(lang, str).value
            catch
                ""
        else
            ""
}
md.use(emoji)
md.renderer.rules.emoji: (token, idx) ->
    r: twemoji.parse(token.(idx).content)

    # This emoji plugin isn't compatible with XHTML, so we must convert it to XHTML
    matched: r.match(r"^(<img\b[^>]+[^/])>$")
    r: matched'ok ? matched.1 + "/>" | token.(idx).content

    r

parseElement: s -> DOMParser().parseFromString(s, "application/xml").documentElement

inCompactMode'export: false
header'export: null
contentElement'export: null
contentDom'export: null
leftCol'export: null
toc'export: null
blogs'export: null
blogsCursor'export: 0
commentsElement'export: null
docs'export: null
currentDoc'export: null
tocLimit'export: null
mainBody'export: null
firstScene'export: null
secondScene'export: null
mainScene'export: null
scrollElement'export: null
sceneBox'export: null
wheelEffective'export: true

ui.setRem ui.GmRem(client.browser.deviceType = "handheld" ? 0.032 | 0.016)

docs: client.text
.filter(doc ->
    not doc.filename.startsWith(".") and (
        doc.filename.endsWith(".md") or doc.filename.endsWith(".markdown")
    )
).map(doc ->
    head: doc.content.substr(0, 80).trim()
    head: head.match(r"^(?:#* )?([^\r\n]*)").1
    renderedHead: md.render(head)
    renderedHead: renderedHead.match(r"<p>(.*)</p>").1
    id: doc.filename.substr(0, doc.filename.lastIndexOf("."))
    if id = "home"
        id: ""
        category: "home"
    else
        matched: id.match(r"^(\d\d\d\d)_(\d\d)_(\d\d)($|_)")
        if matched'ok
            category: "blog"
            time: "\(matched.1)-\(matched.2)-\(matched.3)"
        else
            category: "article"
    {
        id: id
        category: category
        title: head
        htmlTitle: renderedHead
        time: time
        content: doc.content
    }
)

contentElement: ui.Element(
    {
        lineHeight: 1.5
        selectable: client.browser.deviceType = "computer"
        pointer: "auto"
    }
)
contentDom: contentElement.raw
ui.root
.setPaint("rgb(224,224,224)")
.setBackgroundPaint("rgb(255,255,255)")
.setPointerDefaultEnabled(client.browser.deviceType = "computer")
firstScene: ui.Board({backgroundPaint: "rgb(70,70,70)"}, ui.Stack(
    {childAlignment: "center", width: 1, childSpacing: "4rem"}
    ui.Text({fontSize: 4}, "詹臻臻的博客")
    ui.Text("向下滚动")
))
secondScene: ui.Board({backgroundPaint: "rgb(70,70,70)"}, ui.Stack(
    {childAlignment: "center", width: 0.5, childSpacing: "2rem"}
    ui.Image({width: 1}, "/childhood-computer.jpg")
    ui.Text(
        {wrapping: "wrap"}
        "
            我生于1982年，小时候对一切自己会动的玩具感兴趣。1989年读小学1年级时，\
            家里有了一台叫做“中华学习机”的电脑，从此接触并爱上编程（因为觉得会自动运行真的很好玩）。\
            这幅照片显示了我小时候是怎样玩电脑的。那时没有专门的显示器，这台黑白电视机勉强能够应付，\
            里面可以看到似乎有文字，其实是一段BASIC程序。这电脑是兼容Apple-II的，\
            还接了个5寸盘的驱动器（在左边）。
        "
    )
    ui.Text("向下滚动")
))
mainScene: ui.Board({backgroundPaint: "rgb(70,70,70)"}, ui.Stack(
    {
        width: "auto"
        height: 1
        aspectRatio: 1.33333
        horizontal: true
        backgroundPaint: "rgb(51,51,51)"
    }
    ui.Stack(
        {
            width: 0.22
            height: 1
            childSpacing: "1rem"
            padding: ui.Padding("0.5rem", "2rem", 0, "1rem")
        }
        ui.Stack(
            {
                width: 1
                childSpacing: "0.3rem"
            }
            ui.Text("重新载入", {
                padding: ui.Padding("0.5rem")
                backgroundPaint: "rgb(96,96,96)"
                pointer: "link"
                hoverStyles: {backgroundPaint: "rgba(224,224,224,0.32)"}
                activeStyles: {backgroundPaint: "rgba(224,224,224,0.4)"}
                click: <>
                    client.localData.homeLoaded: false
                    client.saveLocalData()
                    scrollElement.raw.scrollTop: 0
                    ui.root.setWheelTarget(null)
                    $toc.compactToggle(true) if $toc.compactSwitch
                    sceneBox.showScene(firstScene, ui.transition.dissolve, 600)
                    client.setUri("/")
            })
            ui.Text("主页", {
                padding: ui.Padding("0.5rem")
                backgroundPaint: "rgb(96,96,96)"
                pointer: "link"
                hoverStyles: {backgroundPaint: "rgba(224,224,224,0.32)"}
                activeStyles: {backgroundPaint: "rgba(224,224,224,0.4)"}
                click: <>
                    $toc.compactToggle() if inCompactMode
                    client.setUri("/")
            })
        )
        ui.Stack(
            {
                horizontal: true
                width: 1
                height: "2rem"
                childSpacing: "0.3rem"
            }
            $button.Button("前", {click: <>
                blogsCursor: Math.max(self - tocLimit, 0)
                $toc.fillBlogs(blogs..portion(blogsCursor, 10))
            }) as previousButton
            $button.Button("后", {click: <>
                blogsCursor: Math.max(Math.min(self + tocLimit, blogs.length - tocLimit), 0)
                $toc.fillBlogs(blogs..portion(blogsCursor, 10))
            }) as nextButton
        )
        ui.Stack{
            width: 1
            height: "35rem"
            childSpacing: "0.3rem"
        } as toc
    ) as leftCol
    ui.Stack(
        {
            childAlignment: "start"
            overflow: "hidden"
            childSpacing: "1rem"
            padding: ui.Padding("0.5rem", "2rem", "0.5rem", "0rem")
            width: 0.78
            height: 1
        }
        ui.Stack(
            {
                horizontal: true
                childSpacing: "1rem"
            }
            ui.Text() as headerTime
            $button.Button("目录", {click: <>
                $toc.compactToggle() if inCompactMode
            }) as headerTocButton
        ) as header
        contentElement
        ui.Text("评论", {fontSize: 2})
        ui.Text("以下是网友评论。不代表本人支持其中的观点。请勿发表不良内容，否则一经发现将被删除\
        （如发现请向本人举报）。", {fontSize: 0.8, wrapping: "wrap"})
        ui.Stack{
            childAlignment: "start"
            width: 1
            height: "auto"
            childSpacing: "0.5rem"
        } as commentsElement
        ui.Element{height: "1rem"}
        ui.Text("
            点击“添加评论”后，请在标题栏输入文章的ID，文章ID为URL中的路径名（不包括“/”）。\
            例如，URL为“https://zhanzhenzhen.github.io/2016_01_01”，则ID为“2016_01_01”。\
            如果是为主页添加评论，则不用输入ID。
        ", {wrapping: "wrap", fontSize: 0.9})
        $button.Button("添加评论", {
            fontSize: 1.3
            padding: ui.Padding("1rem", "0.5rem")
            click: <>
                client.openLink("https://github.com/\(username)/\(repo)/issues/new", true)
        })
        $button.Button("All Issues", {
            fontSize: 0.9
            click: <>
                client.openLink("https://github.com/\(username)/\(repo)/issues", true)
        })

        # This can't be replaced with a bottom-padding in the container, because bottom-padding
        # will be ignored by some browsers. Also, we must set a non-zero width, otherwise Firefox
        # will still ignore it.
        ui.Element{width: "1rem", height: "1rem"}
    ) as scrollElement
) as mainBody)
sceneBox: ui.SceneBox(firstScene, secondScene, mainScene)
ui.root.add sceneBox

docs.forEach doc ->
    docsObj.(doc.id): doc

blogs: docs.filter(m -> m.category = "blog")..sortDescending(m -> m.time)
###
blogGroup.1..sortDescending(m -> m.time).forEach(blog ->
    date: blog.time
    dateStr: date.getUTCFullYear()..pad(4) + "-"
        + (date.getUTCMonth() + 1)..pad(2) + "-"
        + date.getUTCDate()..pad(2)
    toc.add(ui.Stack(
        {
            width: 1
            height: "4rem"
            padding: ui.Padding("0.5rem")
            backgroundPaint: "rgb(96,96,96)"
            pointer: "link"
            click: <> client.setUri("/" + blog.id)
        }
        ui.Text(blog.title, {wrapping: "wrap"})
        ui.Text(dateStr, {fontSize: 0.7})
    ))
)
###

refreshHeader: (changesTime: true) ->
    if changesTime
        if currentDoc'ok and currentDoc.category = "blog"
            headerTime.setSource(currentDoc.time).show()
        else
            headerTime.collapse()

    if inCompactMode
        headerTocButton.show()
    else
        headerTocButton.collapse()

    if headerTime.getVisibility() = "collapsed" and headerTocButton.getVisibility() = "collapsed"
        header.collapse()
    else
        header.show()

oldPath: null
uriUpdateHandler: <>
    path: decodeURI(location.pathname)
    if path ≠ oldPath

        contentElement.empty()
        commentsElement.empty()

        strippedPath: path.substr(1)
        if strippedPath.endsWith("/")
            strippedPath: strippedPath.substr(0, strippedPath.length - 1)
        doc: docsObj.(strippedPath)

        if doc'ok
            currentDoc: doc
            document.title: doc.title
            htmlString: md.render(doc.content)
            contentDom.innerHTML: parseElement("
                <div xmlns="http://www.w3.org/1999/xhtml">
                    \(htmlString)
                </div>
            ").innerHTML
            if client.browser.deviceType ≠ "computer"
                Array.from(contentDom.getElementsByTagName("a")).forEach(hyperlink ->
                    client.dom.initElementEvents(hyperlink)
                    hyperlink.addEventListener(client.dom.getCustomEventName("click"), <>
                        client.openLink(hyperlink.href)
                    )
                )
        else
            currentDoc: null
            document.title: ""
            contentDom.textContent: ""

        refreshHeader()

        web.jsonGet("\(apiBase)/search/issues?q=\(encodeURIComponent(doc.id))+\
        in:title+-label:blocked+repo:\(username)/\(repo)&sort=created")
        .then(response ->
            issues: response.body.items
            if issues..isEmpty()
                commentsElement.add(
                    ui.Text("无评论。")
                )
            else
                issues.forEach issue ->
                    commentsElement.add(ui.Stack(
                        {
                            childAlignment: "start"
                            width: 1
                            height: "auto"
                            childSpacing: "0.3rem"
                        }
                        ui.Text(issue.user.login + ":")
                        ui.Text(issue.body, {wrapping: "wrap"})
                        $button.Button("\(issue.comments)回复", {
                            fontSize: 0.8
                            click: <>
                                client.openLink(issue.html_url, true)
                        })
                    ))
        ).catch(<>
            commentsElement.add(
                ui.Text("评论加载错误，请在1分钟后再试试。如果您在1分钟之内浏览不同页面超过10次，\
                将超出GitHub的配额，导致评论无法加载。", {wrapping: "wrap"})
            )
        )

        oldPath: path

client.onUriChange(uriUpdateHandler)

resizeHandler: <>
    viewportSize: ui.getSize()

    tocLimit: Math.max(0, Math.floor((viewportSize.y - 15) / 3))

    if viewportSize.x / viewportSize.y < 1
        inCompactMode: true
        mainBody.setAspectRatio(null).setWidth(1.5).setAnchor(0.333333, 0.5).setX(0)
        leftCol.setWidth(0.333333)
        scrollElement.setWidth(0.666666)
    else
        inCompactMode: false
        if client.browser.deviceType = "handheld"
            mainBody.setAspectRatio(null).setWidth(1).setAnchor(0.5, 0.5).setX(0.5)
            leftCol.setWidth(0.3)
            scrollElement.setWidth(0.7)
        else
            mainBody.setAspectRatio(1.33333).setWidth("auto").setAnchor(0.5, 0.5).setX(0.5)
            leftCol.setWidth(0.22)
            scrollElement.setWidth(0.78)

    $toc.compactToggle(true) if $toc.compactSwitch
    $toc.refresh()
    refreshHeader(false)

ui.onResize(resizeHandler)

ui.root.onWheelStart(e ->
    if wheelEffective
        wheelEffective: false
        (
            if e.forward
                match sceneBox.getCurrentScene()
                    firstScene
                        sceneBox.showScene(secondScene, ui.transition.dissolve, 600)
                    secondScene
                        client.localData.homeLoaded: true
                        client.saveLocalData()
                        sceneBox.showScene(mainScene, ui.transition.dissolve, 600)
                    mainScene
                        if ui.root.getWheelTarget() = null
                            ui.root.setWheelTarget(scrollElement)
                        Promise.resolve()
                    |
                        Promise.resolve()
            else
                match sceneBox.getCurrentScene()
                    secondScene
                        sceneBox.showScene(firstScene, ui.transition.dissolve, 600)
                    mainScene
                        if ui.root.getWheelTarget() = null
                            ui.root.setWheelTarget(scrollElement)
                        Promise.resolve()
                    |
                        Promise.resolve()
        ).then(<>
            wheelEffective: true
        )
)

resizeHandler()
uriUpdateHandler()
$toc.fillBlogs(blogs..portion(0, 10))

if client.localData.homeLoaded
    ui.root.setWheelTarget(scrollElement)
    sceneBox.showScene(mainScene, ui.transition.dissolve, 600)
else
    sceneBox.showScene(firstScene, ui.transition.dissolve, 600)
