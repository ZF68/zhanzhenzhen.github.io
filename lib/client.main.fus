fus 2.1.0
import "babel-polyfill"
import "./shared.manifest" all

# Modify these 2 variables to match yours.
username: "zhanzhenzhen"
repo: "zhanzhenzhen.github.io"

shared: import "site/shared"
#import "./shared.main"
client: import "site/client"

marked: import "marked"
hljs: import "highlight.js"
#manuals: require("./client.manuals.coffee")
ui: client.ui

apiBase: "https://api.github.com"

docsObj: {}
originalTitle: document.title

markedRenderer: marked.Renderer()
marked.setOptions{
    highlight: code -> hljs.highlightAuto(code).value
    renderer: markedRenderer
}
markedRenderer.html: s -> s.startsWith("<script ") or s.startsWith("<script>") ? "" | s

parseElement: s -> DOMParser().parseFromString(s, "application/xml").documentElement

contentElement: null
contentDom: null
leftCol: null
commentsElement: null
docs: null
scene: null
sceneBox: null

ui.setRem(0.02)

Promise.all(client.text.map(doc ->
    if (doc.filename.endsWith(".md") or doc.filename.endsWith(".markdown"))
    and doc.content.startsWith("<script ")
        pos: doc.content.search("</script>")
        metaString: doc.content.substr(0, pos + "</script>".length)
        metaElement:
            DOMParser().parseFromString(metaString, "text/html")
            .querySelector("script[type=\"application/ld+json\"]")
        fileType: "markdown"
    (
        if metaElement'ok
            shared.jsonLd.compact(
                JSON.parse(metaElement.textContent),
                {"@context": "http://schema.org/"}
            )
        else
            Promise.resolve{}
    ).then(meta ->
        candidateId: doc.filename.substr(0, doc.filename.lastIndexOf("."))
        {
            title: meta.headline ifnull "no title"
            time: Date(meta.dateCreated ifnull "2010-01-02T00:00Z")
            type: fileType
            id: match candidateId
                ""     ? null
                "home" ? ""
                |        candidateId
            content: doc.content
        }
    )
)).then(rawDocs ->
    docs: rawDocs.filter(m -> m.type'ok and m.id'ok)
    contentElement: ui.Element(
        {
            lineHeight: 1.5
            selectable: true
            pointer: "auto"
        }
    )
    contentDom: contentElement.raw
    ui.root
    .setPaint("rgb(224,224,224)")
    .setBackgroundPaint("rgb(255,255,255)")
    scene: ui.Board({backgroundPaint: "rgb(70,70,70)"}, ui.Stack(
        {
            width: "auto"
            aspectRatio: 1.25
            horizontal: true
            backgroundPaint: "rgb(51,51,51)"
        }
        ui.Stack{
            width: 0.2
            childSpacing: "0.3rem"
            padding: ui.Padding("0.5rem", "2rem", 0, "1rem")
        } as leftCol
        ui.Stack(
            {
                childAlignment: "start"
                overflow: "scroll"
                childSpacing: "1rem"
                padding: "0.5rem"
                width: 0.8
            }
            contentElement
            ui.Text("评论", {fontSize: 2})
            ui.Text("以下是网友评论。不代表本人支持其中的观点。请勿发表不良内容，否则一经发现将被删除\
            （如发现请向本人举报）。", {fontSize: 0.8, wrapping: "wrap"})
            ui.Stack{
                childAlignment: "start"
                height: "auto"
                childSpacing: "0.5rem"
            } as commentsElement
            ui.Element{height: "1rem"}
            ui.Text("
                点击“添加评论”后，请在标题栏输入文章的ID，文章ID为URL中的路径名（不包括“/”）。\
                例如，URL为“https://zhanzhenzhen.github.io/2016_01_01”，则ID为“2016_01_01”。\
                如果是为主页添加评论，则不用输入ID。
            ", {wrapping: "wrap", fontSize: 0.9})
            ui.Button("添加评论", {
                fontSize: 1.3
                padding: ui.Padding("1rem", "0.5rem")
                click: <>
                    location.href: "https://github.com/\(username)/\(repo)/issues/new"
            })
            ui.Button("All Issues", {
                fontSize: 0.9
                click: <>
                    location.href: "https://github.com/\(username)/\(repo)/issues"
            })
        )
    ))
    sceneBox: ui.SceneBox(scene)
    ui.root.add sceneBox

    docs.forEach doc ->
        docsObj.(doc.id): doc
    groups: docs..group(m ->
        if m.id = ""
            "home"
        else if m.id.match(r"^\d\d\d\d_\d\d_\d\d($|_)")'ok
            "blog"
        else
            "article"
    )
    homeGroup: groups..singleOrNull(m -> m.0 = "home")
    blogGroup: groups..singleOrNull(m -> m.0 = "blog")

    if homeGroup'ok
        leftCol.add(ui.Text(homeGroup.1.0.title, {
            padding: ui.Padding("0.5rem")
            backgroundPaint: "rgb(96,96,96)"
            pointer: "link"
            click: <> client.setUri("/")
        }))

    if blogGroup'ok
        blogGroup.1..sortDescending(m -> m.time).forEach(blog ->
            date: blog.time
            dateStr: date.getUTCFullYear()..pad(4) + "-"
                + (date.getUTCMonth() + 1)..pad(2) + "-"
                + date.getUTCDate()..pad(2)
            leftCol.add(ui.Stack(
                {
                    height: "auto"
                    padding: ui.Padding("0.5rem")
                    backgroundPaint: "rgb(96,96,96)"
                    pointer: "link"
                    click: <> client.setUri("/" + blog.id)
                }
                ui.Text(blog.title)
                ui.Text(dateStr, {fontSize: 0.7})
            ))
        )

    oldPath: null
    uriUpdateHandler: <>
        path: decodeURI(location.pathname)
        if path ≠ oldPath

            contentElement.empty()
            commentsElement.empty()

            strippedPath: path.substr(1)
            if strippedPath.endsWith("/")
                strippedPath: strippedPath.substr(0, strippedPath.length - 1)
            doc: docsObj.(strippedPath)

            if doc'ok
                document.title: doc.title
                if doc.type = "markdown"
                    htmlString: marked.parse(doc.content)
                    contentDom.innerHTML: parseElement("
                        <div xmlns="http://www.w3.org/1999/xhtml">
                            <h1>\(shared.encodeXMLComponent(doc.title))</h1>
                            \(htmlString)
                        </div>
                    ").innerHTML
                else
                    contentDom.textContent: doc.content
            else
                document.title: ""
                contentDom.textContent: ""

            web.jsonGet("\(apiBase)/search/issues?q=\(encodeURIComponent(doc.id))+\
            in:title+-label:blocked+repo:\(username)/\(repo)&sort=created")
            .then(response ->
                issues: response.body.items
                if issues..isEmpty()
                    commentsElement.add(
                        ui.Text("无评论。")
                    )
                else
                    issues.forEach issue ->
                        commentsElement.add(ui.Stack(
                            {
                                childAlignment: "start"
                                height: "auto"
                                childSpacing: "0.3rem"
                            }
                            ui.Text(issue.user.login + ":")
                            ui.Text(issue.body, {wrapping: "wrap"})
                            ui.Button("\(issue.comments)回复", {
                                fontSize: 0.8
                                click: <>
                                    location.href: issue.html_url
                            })
                        ))
            ).catch(<>
                commentsElement.add(
                    ui.Text("评论加载错误，请在1分钟后再试试。如果您在1分钟之内浏览不同页面超过10次，\
                    将超出GitHub的配额，导致评论无法加载。", {wrapping: "wrap"})
                )
            )

            oldPath: path

    uriUpdateHandler()
    client.onUriChange(uriUpdateHandler)

    sceneBox.showScene(
        scene
        [
            ui.transition.dissolve
            ui.transition.slide("left")
            ui.transition.slide("right")
            ui.transition.slide("up")
            ui.transition.slide("down")
        ]..randomOne()
        600
    )
).then(<>
)
