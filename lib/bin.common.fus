fus 2.4.1
import "./shared.manifest" all

fs: import "fs"
githubInfo: import "./client.github-info"
githubCredential: require("../github-credential")

apiBase: "https://api.github.com"

headerFields: {
    "Authorization":
        "Basic "
        + (githubCredential.username + ":" + githubCredential.password)..toBytes()..toBase64()
    "If-Modified-Since": "Sat, 01 Jan 2000 00:00:00 GMT" # disable cache
    "User-Agent": "none" # this can be anything, we use "none"
}

validateName: name ->
    assert(name is String and 1 ≤ name.length ≤ 100)
    assert(name.search(r"^[^'\"\\/:|*?]+$") ≠ -1)
    assert(name.search(r"^[^\x00-\x1f\x7f]+$") ≠ -1)

validateIssueNumber: x -> assert(Number.isInteger(x) and 0 ≤ x ≤ 999999)

add'export: (name: "no-title") ->
    validateName(name)
    issue: web.jsonPost(
        "\(apiBase)/repos/\(githubInfo.owner)/\(githubInfo.repo)/issues"
        {title: name}
        {headerFields: headerFields}
    )'wait.body
    fs.writeFileSync("public-text/\(issue.number)-\(name).md", "")

rename'export: (issueNumber, name) ->
    validateIssueNumber(issueNumber)
    validateName(name)
    filename: fs.readdirSync("public-text")..first(m -> m.startsWith("\(issueNumber)-") and m.endsWith(".md"))
    validateName(filename)
    fs.renameSync("public-text/\(filename)", "public-text/\(issueNumber)-\(name).md")
    web.request{
        method: "PATCH"
        uri: "\(apiBase)/repos/\(githubInfo.owner)/\(githubInfo.repo)/issues/\(issueNumber)"
        headerFields: Object..absorb({"Content-Type": "application/json"}, headerFields)
        body: JSON.stringify{title: name}
        responseBodyType: "json"
    }
